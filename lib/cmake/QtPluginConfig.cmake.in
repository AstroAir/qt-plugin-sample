# QtPluginConfig.cmake.in - CMake package configuration file

@PACKAGE_INIT@

# QtPlugin library configuration
set(QTPLUGIN_VERSION "@PROJECT_VERSION@")
set(QTPLUGIN_VERSION_MAJOR "@PROJECT_VERSION_MAJOR@")
set(QTPLUGIN_VERSION_MINOR "@PROJECT_VERSION_MINOR@")
set(QTPLUGIN_VERSION_PATCH "@PROJECT_VERSION_PATCH@")

# Component availability
set(QTPLUGIN_NETWORK_FOUND @QTPLUGIN_BUILD_NETWORK@)
set(QTPLUGIN_UI_FOUND @QTPLUGIN_BUILD_UI@)
set(QTPLUGIN_SECURITY_FOUND TRUE)  # Always available

# Find Qt6 dependencies
find_dependency(Qt6 REQUIRED COMPONENTS Core)

if(QTPLUGIN_NETWORK_FOUND)
    find_dependency(Qt6 REQUIRED COMPONENTS Network)
endif()

if(QTPLUGIN_UI_FOUND)
    find_dependency(Qt6 REQUIRED COMPONENTS Widgets)
endif()

# Include target files
include("${CMAKE_CURRENT_LIST_DIR}/QtPluginCoreTargets.cmake")

if(QTPLUGIN_NETWORK_FOUND)
    include("${CMAKE_CURRENT_LIST_DIR}/QtPluginNetworkTargets.cmake")
endif()

if(QTPLUGIN_UI_FOUND)
    include("${CMAKE_CURRENT_LIST_DIR}/QtPluginUITargets.cmake")
endif()

include("${CMAKE_CURRENT_LIST_DIR}/QtPluginSecurityTargets.cmake")

# Handle components
set(QtPlugin_FOUND TRUE)
set(QtPlugin_Core_FOUND TRUE)
set(QtPlugin_Security_FOUND TRUE)

if(QTPLUGIN_NETWORK_FOUND)
    set(QtPlugin_Network_FOUND TRUE)
endif()

if(QTPLUGIN_UI_FOUND)
    set(QtPlugin_UI_FOUND TRUE)
endif()

# Check requested components
if(QtPlugin_FIND_COMPONENTS)
    foreach(component ${QtPlugin_FIND_COMPONENTS})
        if(NOT QtPlugin_${component}_FOUND)
            if(QtPlugin_FIND_REQUIRED_${component})
                message(FATAL_ERROR "QtPlugin component ${component} not found")
            else()
                message(WARNING "QtPlugin component ${component} not found")
                set(QtPlugin_FOUND FALSE)
            endif()
        endif()
    endforeach()
endif()

# Provide information about what was found
if(QtPlugin_FOUND)
    message(STATUS "Found QtPlugin ${QTPLUGIN_VERSION}")
    message(STATUS "  Core: YES")
    message(STATUS "  Security: YES")
    if(QTPLUGIN_NETWORK_FOUND)
        message(STATUS "  Network: YES")
    else()
        message(STATUS "  Network: NO")
    endif()
    if(QTPLUGIN_UI_FOUND)
        message(STATUS "  UI: YES")
    else()
        message(STATUS "  UI: NO")
    endif()
endif()

# Helper function to create plugins
function(qtplugin_add_plugin target)
    cmake_parse_arguments(PLUGIN
        ""
        "TYPE;OUTPUT_NAME;INSTALL_DIR"
        "SOURCES;HEADERS;METADATA;DEPENDENCIES"
        ${ARGN}
    )
    
    if(NOT PLUGIN_TYPE)
        set(PLUGIN_TYPE "generic")
    endif()
    
    if(NOT PLUGIN_OUTPUT_NAME)
        set(PLUGIN_OUTPUT_NAME ${target})
    endif()
    
    if(NOT PLUGIN_INSTALL_DIR)
        set(PLUGIN_INSTALL_DIR "plugins")
    endif()
    
    # Create the plugin library
    add_library(${target} MODULE ${PLUGIN_SOURCES} ${PLUGIN_HEADERS})
    
    # Set properties
    set_target_properties(${target} PROPERTIES
        OUTPUT_NAME ${PLUGIN_OUTPUT_NAME}
        PREFIX ""
        SUFFIX ".qtplugin"
        AUTOMOC ON
    )
    
    # Link QtPlugin core
    target_link_libraries(${target} PRIVATE QtPlugin::Core)
    
    # Link additional dependencies
    if(PLUGIN_DEPENDENCIES)
        target_link_libraries(${target} PRIVATE ${PLUGIN_DEPENDENCIES})
    endif()
    
    # Install plugin
    install(TARGETS ${target}
        LIBRARY DESTINATION ${PLUGIN_INSTALL_DIR}
        RUNTIME DESTINATION ${PLUGIN_INSTALL_DIR}
    )
    
    # Install metadata if provided
    if(PLUGIN_METADATA)
        install(FILES ${PLUGIN_METADATA}
            DESTINATION ${PLUGIN_INSTALL_DIR}
        )
    endif()
endfunction()

# Helper function to find plugins
function(qtplugin_find_plugins output_var directory)
    file(GLOB_RECURSE plugin_files 
        "${directory}/*.qtplugin"
        "${directory}/*.so"
        "${directory}/*.dll"
        "${directory}/*.dylib"
    )
    set(${output_var} ${plugin_files} PARENT_SCOPE)
endfunction()

check_required_components(QtPlugin)
